package main

import (
	"crypto/tls"
	"encoding/gob"
	"errors"
	"fmt"
	"log"
	"math"
	"net"
	"net/http"
	"os"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/grpclog"

	"github.com/anxiousmodernman/goth/gothic"
	"github.com/codegangsta/negroni"
	"github.com/gorilla/mux"
	"github.com/gorilla/sessions"
	"github.com/improbable-eng/grpc-web/go/grpcweb"
	"github.com/johanbrandhorst/protobuf/wsproxy"
	"github.com/sirupsen/logrus"
	"github.com/urfave/cli"

	"gitlab.com/DSASanFrancisco/co-chair/backend"
	"gitlab.com/DSASanFrancisco/co-chair/config"
	"gitlab.com/DSASanFrancisco/co-chair/proto/server"
)

// Version is our software version.
var Version = "0.1.0"

var (
	// Store is our sessions store.
	Store *sessions.CookieStore
)

var logger *logrus.Logger

func init() {

	Store = sessions.NewCookieStore([]byte("something-very-secret"))
	logger = logrus.StandardLogger()
	logrus.SetLevel(logrus.DebugLevel)
	logrus.SetFormatter(&logrus.TextFormatter{
		ForceColors:     true,
		FullTimestamp:   true,
		TimestampFormat: time.RFC3339Nano,
		DisableSorting:  true,
	})

	// set the grpc logger
	grpclog.SetLoggerV2(grpclog.NewLoggerV2(logger.Out, logger.Out, logger.Out))

	// set up sessions store
	store := sessions.NewFilesystemStore(os.TempDir(), []byte("secret-here?"))
	store.MaxLength(math.MaxInt64)
	gothic.Store = store

	// prevent error:
	// gob: type not registered for interface: map[string]interface {}
	var t map[string]interface{}
	gob.Register(t)
}

func main() {

	app := cli.NewApp()
	app.Version = Version

	conf := cli.StringFlag{
		Name:  "conf",
		Usage: "path to config file",
	}

	dbFlag := cli.StringFlag{
		Name:  "db",
		Usage: "path to db",
		Value: "co-chair.db",
	}

	apiCert := cli.StringFlag{
		Name:  "apiCert",
		Usage: "for grpc mgmt api: path to pem encoded tls certificate",
		Value: "./cert.pem",
	}

	apiKey := cli.StringFlag{
		Name:  "apiKey",
		Usage: "for grpc mgmt api: path to pem encoded tls private key",
		Value: "./key.pem",
	}

	apiPort := cli.StringFlag{
		Name:  "apiPort",
		Usage: "port number for grpc mgmt api",
		Value: "1917",
	}

	webCert := cli.StringFlag{
		Name:  "webUICert",
		Usage: "for web ui: path to pem encoded tls certificate",
		Value: "./cert.pem",
	}

	webKey := cli.StringFlag{
		Name:  "webUIKey",
		Usage: "for web ui: path to pem encoded tls private key",
		Value: "./key.pem",
	}

	webPort := cli.StringFlag{
		Name:  "webPort",
		Usage: "port number for web ui",
		Value: "2016",
	}

	proxyCert := cli.StringFlag{
		Name:  "proxyCert",
		Usage: "for web ui: path to pem encoded tls certificate",
		Value: "./cert.pem",
	}

	proxyKey := cli.StringFlag{
		Name:  "proxyKey",
		Usage: "for web ui: path to pem encoded tls private key",
		Value: "./key.pem",
	}

	proxyPort := cli.StringFlag{
		Name:  "proxyPort",
		Usage: "port number for http proxy",
		Value: "8080",
	}

	auth0ClientID := cli.StringFlag{
		Name:   "auth0ClientID",
		Usage:  "Auth0 Client ID for this co-chair instance",
		EnvVar: "COCHAIR_AUTH0_CLIENTID",
	}

	auth0Secret := cli.StringFlag{
		Name:   "auth0Secret",
		Usage:  "Auth0 Secret",
		EnvVar: "COCHAIR_AUTH0_SECRET",
	}

	bypassAuth0 := cli.BoolTFlag{
		Name:  "bypassAuth0",
		Usage: "totally bypass auth0; insecure development mode",
	}

	app.Commands = []cli.Command{
		cli.Command{
			Name:  "serve",
			Usage: "run co-chair",
			Flags: []cli.Flag{dbFlag, apiCert, apiKey, apiPort, webCert,
				webKey, webPort, proxyCert, proxyKey, proxyPort, auth0ClientID,
				auth0Secret, bypassAuth0, conf},
			Action: func(ctx *cli.Context) error {
				conf, err := config.FromCLIOpts(ctx)
				if err != nil {
					return err
				}
				return run(conf)
			},
		},
		cli.Command{
			Name:  "systemd-install",
			Usage: "installs a unit file and config directory",
			Flags: []cli.Flag{conf},
			Action: func(ctx *cli.Context) error {
				conf, err := config.FromCLIOpts(ctx)
				if err != nil {
					return err
				}
				return config.SystemDInstall(conf)
			},
		},
	}

	if err := app.Run(os.Args); err != nil {
		log.Fatal(err)
	}
}

func run(conf config.Config) error {
	logger.Println("config", conf)

	// NewProxy gives us a Proxy, our concrete implementation of the
	// interface generated by the grpc protobuf compiler.
	px, err := backend.NewProxy(conf.DBPath)
	if err != nil {
		log.Fatalf("proxy init: %v", err)
	}

	// Pure-gRPC instance management API
	grpcOnlyServer := grpc.NewServer()
	server.RegisterProxyServer(grpcOnlyServer, px)
	lis, err := net.Listen("tcp", fmt.Sprintf("127.0.0.1:%s", conf.APIPort))
	if err != nil {
		return fmt.Errorf("listener error: %v", err)
	}

	// gRPC over websockets management API
	gs := grpc.NewServer()
	server.RegisterProxyServer(gs, px)
	wrappedServer := grpcweb.WrapServer(gs)

	webTLS, err := credentials.NewClientTLSFromFile(conf.WebUICert, "")
	if err != nil {
		return errors.New("Failed to get local server client credentials, did you run `make generate_cert`?")
	}

	wsproxy := wsproxy.WrapServer(
		wrappedServer,
		wsproxy.WithLogger(logger),
		wsproxy.WithTransportCredentials(webTLS))

	// Note: routes are evaluated in the order they're defined.
	p := mux.NewRouter()

	authHandler := IsAuthenticated
	if conf.BypassAuth0 {
		logger.Debug("bypassing auth")
		authHandler = func(w http.ResponseWriter, r *http.Request, next http.HandlerFunc) {
			next(w, r)
		}

	}
	p.Handle("/login", negroni.New(
		negroni.HandlerFunc(withLog),
		negroni.Wrap(http.HandlerFunc(loginLink)),
	)).Methods("GET")

	p.Handle("/auth/{provider}/callback", negroni.New(
		negroni.HandlerFunc(withLog),
		negroni.Wrap(http.HandlerFunc(oauthCallbackHandler)),
	)).Methods("GET")

	p.Handle("/auth/{provider}", negroni.New(
		negroni.HandlerFunc(withLog),
		negroni.Wrap(http.HandlerFunc(loginHandler)),
	)).Methods("GET")

	p.Handle("/logout/{provider}", negroni.New(
		negroni.HandlerFunc(withLog),
		negroni.Wrap(http.HandlerFunc(logoutHandler)),
	)).Methods("GET")

	// All websockets requests are POSTs to a
	p.Handle("/web.Proxy/{method}", negroni.New(
		negroni.HandlerFunc(withLog),
		negroni.HandlerFunc(authHandler),
		negroni.Wrap(websocketsProxy(wsproxy)),
	)).Methods("POST")

	p.Handle("/frontend.js", negroni.New(
		negroni.HandlerFunc(withLog),
		negroni.HandlerFunc(authHandler),
		negroni.Wrap(http.HandlerFunc(homeHandler)),
	)).Methods("GET")

	p.Handle("/", negroni.New(
		negroni.HandlerFunc(withLog),
		negroni.HandlerFunc(authHandler),
		negroni.Wrap(http.HandlerFunc(homeHandler)),
	)).Methods("GET")

	addr := fmt.Sprintf("0.0.0.0:%s", conf.WebUIPort)
	httpsSrv := &http.Server{
		Addr:    addr,
		Handler: p,
		// Some security settings
		ReadHeaderTimeout: 5 * time.Second,
		IdleTimeout:       120 * time.Second,
		TLSConfig: &tls.Config{
			PreferServerCipherSuites: true,
			CurvePreferences: []tls.CurveID{
				tls.CurveP256,
				tls.X25519,
			},
		},
	}

	grpcAPI := make(chan error)
	proxy := make(chan error)
	pureGRPC := make(chan error)

	go func() { pureGRPC <- grpcOnlyServer.Serve(lis) }()

	go func() {
		logger.Info("Serving on https://" + addr)
		grpcAPI <- httpsSrv.ListenAndServeTLS(conf.WebUICert, conf.WebUIKey)
	}()

	go func() {
		// we assume api is on localhost
		fwdr, _ := backend.NewProxyForwarder(fmt.Sprintf("127.0.0.1:%s", conf.APIPort), logger)
		s := &http.Server{
			Addr:    fmt.Sprintf(":%s", conf.ProxyPort),
			Handler: fwdr,
		}
		proxy <- s.ListenAndServe()
	}()

	// block
	for {
		select {
		case err := <-grpcAPI:
			return err
		case err := <-proxy:
			return err
		case err := <-pureGRPC:
			return err
		}
	}

}
