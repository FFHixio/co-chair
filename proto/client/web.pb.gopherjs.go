// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: proto/web.proto

/*
	Package client is a generated protocol buffer package.

	Web exposes a backend server over gRPC.

	It is generated from these files:
		proto/web.proto

	It has these top-level messages:
		Backend
		Key
		KV
		ProxyState
		OpResult
		StateRequest
*/
package client

import jspb "github.com/johanbrandhorst/protobuf/jspb"

import (
	context "context"

	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

type Backend struct {
	Domain       string
	Ips          []string
	HealthCheck  string
	HealthStatus string
}

// GetDomain gets the Domain of the Backend.
func (m *Backend) GetDomain() (x string) {
	if m == nil {
		return x
	}
	return m.Domain
}

// GetIps gets the Ips of the Backend.
func (m *Backend) GetIps() (x []string) {
	if m == nil {
		return x
	}
	return m.Ips
}

// GetHealthCheck gets the HealthCheck of the Backend.
func (m *Backend) GetHealthCheck() (x string) {
	if m == nil {
		return x
	}
	return m.HealthCheck
}

// GetHealthStatus gets the HealthStatus of the Backend.
func (m *Backend) GetHealthStatus() (x string) {
	if m == nil {
		return x
	}
	return m.HealthStatus
}

// MarshalToWriter marshals Backend to the provided writer.
func (m *Backend) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Domain) > 0 {
		writer.WriteString(1, m.Domain)
	}

	for _, val := range m.Ips {
		writer.WriteString(2, val)
	}

	if len(m.HealthCheck) > 0 {
		writer.WriteString(3, m.HealthCheck)
	}

	if len(m.HealthStatus) > 0 {
		writer.WriteString(4, m.HealthStatus)
	}

	return
}

// Marshal marshals Backend to a slice of bytes.
func (m *Backend) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Backend from the provided reader.
func (m *Backend) UnmarshalFromReader(reader jspb.Reader) *Backend {
	for reader.Next() {
		if m == nil {
			m = &Backend{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Domain = reader.ReadString()
		case 2:
			m.Ips = append(m.Ips, reader.ReadString())
		case 3:
			m.HealthCheck = reader.ReadString()
		case 4:
			m.HealthStatus = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Backend from a slice of bytes.
func (m *Backend) Unmarshal(rawBytes []byte) (*Backend, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type Key struct {
	Prefix []byte
}

// GetPrefix gets the Prefix of the Key.
func (m *Key) GetPrefix() (x []byte) {
	if m == nil {
		return x
	}
	return m.Prefix
}

// MarshalToWriter marshals Key to the provided writer.
func (m *Key) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Prefix) > 0 {
		writer.WriteBytes(1, m.Prefix)
	}

	return
}

// Marshal marshals Key to a slice of bytes.
func (m *Key) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a Key from the provided reader.
func (m *Key) UnmarshalFromReader(reader jspb.Reader) *Key {
	for reader.Next() {
		if m == nil {
			m = &Key{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Prefix = reader.ReadBytes()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a Key from a slice of bytes.
func (m *Key) Unmarshal(rawBytes []byte) (*Key, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type KV struct {
	Key   []byte
	Value []byte
}

// GetKey gets the Key of the KV.
func (m *KV) GetKey() (x []byte) {
	if m == nil {
		return x
	}
	return m.Key
}

// GetValue gets the Value of the KV.
func (m *KV) GetValue() (x []byte) {
	if m == nil {
		return x
	}
	return m.Value
}

// MarshalToWriter marshals KV to the provided writer.
func (m *KV) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Key) > 0 {
		writer.WriteBytes(1, m.Key)
	}

	if len(m.Value) > 0 {
		writer.WriteBytes(2, m.Value)
	}

	return
}

// Marshal marshals KV to a slice of bytes.
func (m *KV) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a KV from the provided reader.
func (m *KV) UnmarshalFromReader(reader jspb.Reader) *KV {
	for reader.Next() {
		if m == nil {
			m = &KV{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Key = reader.ReadBytes()
		case 2:
			m.Value = reader.ReadBytes()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a KV from a slice of bytes.
func (m *KV) Unmarshal(rawBytes []byte) (*KV, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type ProxyState struct {
	Backends []*Backend
	// a status message, or an error message.
	Status string
	// an error code
	Code int32
}

// GetBackends gets the Backends of the ProxyState.
func (m *ProxyState) GetBackends() (x []*Backend) {
	if m == nil {
		return x
	}
	return m.Backends
}

// GetStatus gets the Status of the ProxyState.
func (m *ProxyState) GetStatus() (x string) {
	if m == nil {
		return x
	}
	return m.Status
}

// GetCode gets the Code of the ProxyState.
func (m *ProxyState) GetCode() (x int32) {
	if m == nil {
		return x
	}
	return m.Code
}

// MarshalToWriter marshals ProxyState to the provided writer.
func (m *ProxyState) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	for _, msg := range m.Backends {
		writer.WriteMessage(1, func() {
			msg.MarshalToWriter(writer)
		})
	}

	if len(m.Status) > 0 {
		writer.WriteString(2, m.Status)
	}

	if m.Code != 0 {
		writer.WriteInt32(3, m.Code)
	}

	return
}

// Marshal marshals ProxyState to a slice of bytes.
func (m *ProxyState) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a ProxyState from the provided reader.
func (m *ProxyState) UnmarshalFromReader(reader jspb.Reader) *ProxyState {
	for reader.Next() {
		if m == nil {
			m = &ProxyState{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			reader.ReadMessage(func() {
				m.Backends = append(m.Backends, new(Backend).UnmarshalFromReader(reader))
			})
		case 2:
			m.Status = reader.ReadString()
		case 3:
			m.Code = reader.ReadInt32()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a ProxyState from a slice of bytes.
func (m *ProxyState) Unmarshal(rawBytes []byte) (*ProxyState, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type OpResult struct {
	Code   int32
	Status string
}

// GetCode gets the Code of the OpResult.
func (m *OpResult) GetCode() (x int32) {
	if m == nil {
		return x
	}
	return m.Code
}

// GetStatus gets the Status of the OpResult.
func (m *OpResult) GetStatus() (x string) {
	if m == nil {
		return x
	}
	return m.Status
}

// MarshalToWriter marshals OpResult to the provided writer.
func (m *OpResult) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if m.Code != 0 {
		writer.WriteInt32(1, m.Code)
	}

	if len(m.Status) > 0 {
		writer.WriteString(2, m.Status)
	}

	return
}

// Marshal marshals OpResult to a slice of bytes.
func (m *OpResult) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a OpResult from the provided reader.
func (m *OpResult) UnmarshalFromReader(reader jspb.Reader) *OpResult {
	for reader.Next() {
		if m == nil {
			m = &OpResult{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Code = reader.ReadInt32()
		case 2:
			m.Status = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a OpResult from a slice of bytes.
func (m *OpResult) Unmarshal(rawBytes []byte) (*OpResult, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type StateRequest struct {
	// if domain is empty string, return "all" states, otherwise
	// match domain DNS-style, e.g. google.com matches docs.google.com
	Domain string
}

// GetDomain gets the Domain of the StateRequest.
func (m *StateRequest) GetDomain() (x string) {
	if m == nil {
		return x
	}
	return m.Domain
}

// MarshalToWriter marshals StateRequest to the provided writer.
func (m *StateRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Domain) > 0 {
		writer.WriteString(1, m.Domain)
	}

	return
}

// Marshal marshals StateRequest to a slice of bytes.
func (m *StateRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a StateRequest from the provided reader.
func (m *StateRequest) UnmarshalFromReader(reader jspb.Reader) *StateRequest {
	for reader.Next() {
		if m == nil {
			m = &StateRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Domain = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a StateRequest from a slice of bytes.
func (m *StateRequest) Unmarshal(rawBytes []byte) (*StateRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion2

// Client API for Proxy service

type ProxyClient interface {
	State(ctx context.Context, in *StateRequest, opts ...grpcweb.CallOption) (*ProxyState, error)
	Put(ctx context.Context, in *Backend, opts ...grpcweb.CallOption) (*OpResult, error)
	Remove(ctx context.Context, in *Backend, opts ...grpcweb.CallOption) (*OpResult, error)
	PutKVStream(ctx context.Context, opts ...grpcweb.CallOption) (Proxy_PutKVStreamClient, error)
	GetKVStream(ctx context.Context, in *Key, opts ...grpcweb.CallOption) (Proxy_GetKVStreamClient, error)
}

type proxyClient struct {
	client *grpcweb.Client
}

// NewProxyClient creates a new gRPC-Web client.
func NewProxyClient(hostname string, opts ...grpcweb.DialOption) ProxyClient {
	return &proxyClient{
		client: grpcweb.NewClient(hostname, "web.Proxy", opts...),
	}
}

func (c *proxyClient) State(ctx context.Context, in *StateRequest, opts ...grpcweb.CallOption) (*ProxyState, error) {
	resp, err := c.client.RPCCall(ctx, "State", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(ProxyState).Unmarshal(resp)
}

func (c *proxyClient) Put(ctx context.Context, in *Backend, opts ...grpcweb.CallOption) (*OpResult, error) {
	resp, err := c.client.RPCCall(ctx, "Put", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(OpResult).Unmarshal(resp)
}

func (c *proxyClient) Remove(ctx context.Context, in *Backend, opts ...grpcweb.CallOption) (*OpResult, error) {
	resp, err := c.client.RPCCall(ctx, "Remove", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(OpResult).Unmarshal(resp)
}

func (c *proxyClient) PutKVStream(ctx context.Context, opts ...grpcweb.CallOption) (Proxy_PutKVStreamClient, error) {
	srv, err := c.client.NewClientStream(ctx, "PutKVStream")
	if err != nil {
		return nil, err
	}

	return &proxyPutKVStreamClient{stream: srv}, nil
}

type Proxy_PutKVStreamClient interface {
	Send(*KV) error
	CloseAndRecv() (*OpResult, error)
	Context() context.Context
}

type proxyPutKVStreamClient struct {
	stream grpcweb.ClientStream
}

func (x *proxyPutKVStreamClient) Send(req *KV) error {
	return x.stream.SendMsg(req.Marshal())
}

func (x *proxyPutKVStreamClient) CloseAndRecv() (*OpResult, error) {
	resp, err := x.stream.CloseAndRecv()
	if err != nil {
		return nil, err
	}

	return new(OpResult).Unmarshal(resp)
}

func (x *proxyPutKVStreamClient) Context() context.Context {
	return x.stream.Context()
}

func (c *proxyClient) GetKVStream(ctx context.Context, in *Key, opts ...grpcweb.CallOption) (Proxy_GetKVStreamClient, error) {
	srv, err := c.client.NewServerStream(ctx, "GetKVStream", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return &proxyGetKVStreamClient{
		stream: srv,
	}, nil
}

type Proxy_GetKVStreamClient interface {
	Recv() (*KV, error)
	Context() context.Context
}

type proxyGetKVStreamClient struct {
	stream grpcweb.ServerStream
}

func (x *proxyGetKVStreamClient) Recv() (*KV, error) {
	resp, err := x.stream.RecvMsg()
	if err != nil {
		return nil, err
	}

	return new(KV).Unmarshal(resp)
}

func (x *proxyGetKVStreamClient) Context() context.Context {
	return x.stream.Context()
}
